location ~ \.php$ {
         # The following line prevents malicious php code to be executed through some uploaded file (without php extension, like image)
         # This fix shoudn't work though, if nginx and php are not on the same server, other options exist (like unauthorizing php execution within upload folder)
         # More on this serious security concern in the "Pass Non-PHP Requests to PHP" section, there http://wiki.nginx.org/Pitfalls
          try_files $uri =404;
  
          # PHP   
          # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
          fastcgi_pass   127.0.0.1:9000;
          #fastcgi_pass php-fpm;
          fastcgi_cache fastcgicache;
          fastcgi_cache_valid any 1m;
          fastcgi_cache_use_stale error timeout invalid_header http_500;
  
          fastcgi_split_path_info ^(.+\.php)(/.+)$;
          fastcgi_index  index.php;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          include fastcgi_params;
          fastcgi_param  QUERY_STRING     $query_string;
          fastcgi_param  REQUEST_METHOD   $request_method;
          fastcgi_param  CONTENT_TYPE     $content_type;
          fastcgi_param  CONTENT_LENGTH   $content_length;
          fastcgi_intercept_errors        on;
          fastcgi_ignore_client_abort     off;
          fastcgi_connect_timeout 60;
          fastcgi_send_timeout 180;
          fastcgi_read_timeout 180;
          fastcgi_buffers 4 256k;
          fastcgi_buffer_size 128k;
          fastcgi_busy_buffers_size 256k;
          fastcgi_temp_file_write_size 256k;
          fastcgi_keep_conn on;
         #Помещать страницу в кеш, после 3-х использований. Меньшее число вызвало у меня труднообъяснимые глюки на формах регистрации
          fastcgi_cache_min_uses 3;
         #Кешировать перечисленные ответы
          fastcgi_cache_valid 200 301 302 304 5m;
         #Формат ключа кеша - по этому ключу nginx находит правильную страничку
          fastcgi_cache_key "$request_method|$host|$request_uri";
         }
